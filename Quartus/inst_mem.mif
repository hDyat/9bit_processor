-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- Quartus Prime generated Memory Initialization File (.mif)

WIDTH=9;
DEPTH=128;

ADDRESS_RADIX=HEX;
DATA_RADIX=BIN;

CONTENT BEGIN
% This code displays a count (in register R2) on the red LEDs. %
00 : 001001000; % mvi R1,#1 // initialize R %
01 : 000000001;
02 : 001010000; % mvi R2,#0 // counter to display on LEDs %
03 : 000000111;
04 : 001011000; % Loop mvi R3,#010000000 // R3 = address of LEDs register %
05 : 010000000;
06 : 101010011; % st R2,R3 // write to LEDs %
07 : 010010001; % add R2,R1 // increment counter for LEDs %
08 : 001011000; % mvi R3,#111111111 // delay value %
09 : 111111111;
0A : 000101111; % mv R5,R7 // save address of next inst. %
0B : 001100000; % Outer mvi R4,#111111111 // nested delay loop %
0C : 111111111;
0D : 000000111; % mv R0,R7 // save address of next inst. %
0E : 011100001; % Inner sub R4,R1 // decrement loop delay variable %
0F : 110111000; % mvnz R7,R0 // continue Inner loop if R4 !=0 %
10 : 011011001; % sub R3,R1 // decrement outer loop delay %
11 : 110111101; % mvnz R7,R5 // continue Outer loop if R3 !=0 %
12 : 001111000; % mvi R7,#Loop // execute again %
13 : 000000100;
END;
